name: Deploy with Docker Hub

on: [push]

env:
  DOCKER_REPO: msorok337/my-website-new  # Замените на ваш репозиторий
  TAG: latest

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_PASSWORD }}

      - name: Build and push
        run: |
          docker build -t ${{ env.DOCKER_REPO }}:${{ env.TAG }} .
          docker push ${{ env.DOCKER_REPO }}:${{ env.TAG }}
          echo "IMAGE_NAME=${{ env.DOCKER_REPO }}:${{ env.TAG }}" >> $GITHUB_ENV

      - name: Verify push
        run: |
          echo "Successfully pushed to Docker Hub:"
          echo "Image: ${{ env.DOCKER_REPO }}:${{ env.TAG }}"
  
  deploy:
    needs: build-and-push
    runs-on: ubuntu-latest
    steps:
    - name: Configure SSH
      run: |
        mkdir -p ~/.ssh
        echo "${{ secrets.VM_SSH_KEY }}" > ~/.ssh/vm_key
        chmod 600 ~/.ssh/vm_key
        echo "StrictHostKeyChecking no" >> ~/.ssh/config

    - name: Deploy to VM
      run: |
        ssh -i ~/.ssh/vm_key \
          -o ConnectTimeout=15 \
          ${{ secrets.VM_USER }}@${{ secrets.VM_IP }} "
          # Docker Hub auth
          echo '${{ secrets.DOCKER_HUB_PASSWORD }}' | \
            docker login -u '${{ secrets.DOCKER_HUB_USERNAME }}' --password-stdin
          
          # Cleanup and deploy
          docker stop running-app || true
          docker rm running-app || true
          docker pull ${{ env.DOCKER_REPO }}:${{ env.TAG }}
          docker run -d --name running-app -p 80:80 ${{ env.DOCKER_REPO }}:${{ env.TAG }}
          
          # Verification
          sleep 5
          curl -fs http://localhost && echo 'Deployment successful!' || echo 'Deployment check failed'
        "
