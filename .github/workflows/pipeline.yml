name: Deploy to Yandex Cloud

on: [push]

env:
  REGISTRY: cr.yandex
  REPO_NAME: my-website
  TAG: latest

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      # Аутентификация через статический ключ
      - name: Authenticate with Static Key
        run: |
          # Формируем auth-токен из статического ключа
          AUTH_TOKEN=$(echo -n "${{ secrets.YC_DOCKER_KEY_ID }}:${{ secrets.YC_DOCKER_SECRET }}" | base64 | tr -d '\n')
          
          # Создаем конфиг Docker
          mkdir -p ~/.docker
          echo "{
            \"auths\": {
              \"${{ env.REGISTRY }}\": {
                \"auth\": \"$AUTH_TOKEN\"
              }
            }
          }" > ~/.docker/config.json
          
          # Проверяем аутентификацию
          if ! docker login cr.yandex --username ${{ secrets.YC_DOCKER_KEY_ID }} --password ${{ secrets.YC_DOCKER_SECRET }} >/dev/null 2>&1; then
            echo "ERROR: Authentication failed"
            echo "Debug info:"
            echo "Key ID: ${{ secrets.YC_DOCKER_KEY_ID }}"
            echo "Registry: ${{ env.REGISTRY }}"
            exit 1
          fi

      - name: Build and Push
        run: |
          IMAGE_NAME="${{ env.REGISTRY }}/${{ secrets.YC_REGISTRY_ID }}/${{ env.REPO_NAME }}:${{ env.TAG }}"
          
          docker build -t $IMAGE_NAME .
          echo "Pushing to $IMAGE_NAME"
          
          if ! docker push $IMAGE_NAME; then
            echo "ERROR: Push failed"
            docker info
            exit 1
          fi
          
          echo "IMAGE_NAME=$IMAGE_NAME" >> $GITHUB_ENV

  deploy:
    needs: build-and-push
    runs-on: ubuntu-latest
    steps:
      - name: Deploy to VM
        uses: appleboy/ssh-action@v1
        with:
          host: ${{ secrets.YC_VM_IP }}
          username: ${{ secrets.YC_VM_USER }}
          key: ${{ secrets.YC_VM_SSH_KEY }}
          script: |
            # Аутентификация на ВМ
            AUTH_TOKEN=$(echo -n "${{ secrets.YC_DOCKER_KEY_ID }}:${{ secrets.YC_DOCKER_SECRET }}" | base64 | tr -d '\n')
            mkdir -p ~/.docker
            echo "{
              \"auths\": {
                \"${{ env.REGISTRY }}\": {
                  \"auth\": \"$AUTH_TOKEN\"
                }
              }
            }" > ~/.docker/config.json
            
            # Деплой
            docker pull ${{ env.IMAGE_NAME }}
            docker stop web-container || true
            docker rm web-container || true
            docker run -d --name web-container -p 80:80 ${{ env.IMAGE_NAME }}
