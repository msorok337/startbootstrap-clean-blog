name: Deploy with Docker Hub

on: [push]

env:
  DOCKER_REPO: msorok337/my-website-new  # Замените на ваш репозиторий
  TAG: latest

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_PASSWORD }}

      - name: Build and push
        run: |
          docker build -t ${{ env.DOCKER_REPO }}:${{ env.TAG }} .
          docker push ${{ env.DOCKER_REPO }}:${{ env.TAG }}
          echo "IMAGE_NAME=${{ env.DOCKER_REPO }}:${{ env.TAG }}" >> $GITHUB_ENV

      - name: Verify push
        run: |
          echo "Successfully pushed to Docker Hub:"
          echo "Image: ${{ env.DOCKER_REPO }}:${{ env.TAG }}"
  
  deploy:
    needs: build-and-push
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Install SSH tools
        run: sudo apt-get install -y sshpass

      - name: Deploy Application
        env:
          SSH_PASSWORD: ${{ secrets.SSH_PASSWORD }}
        run: |
          # Проверка подключения
          sshpass -p "$SSH_PASSWORD" ssh -o StrictHostKeyChecking=no ${{ secrets.SSH_USER }}@${{ secrets.SERVER_IP }} "echo 'SSH connection successful!'"

          # Основной деплой
          sshpass -p "$SSH_PASSWORD" ssh ${{ secrets.SSH_USER }}@${{ secrets.SERVER_IP }} << 'DEPLOY'
          #!/bin/bash
          set -e

          echo "=== Starting deployment at $(date) ==="
          echo "Running as user: $(whoami)"

          # Docker authentication
          echo "${{ secrets.DOCKER_HUB_PASSWORD }}" | \
            docker login -u "${{ secrets.DOCKER_HUB_USERNAME }}" --password-stdin

          # Stop and remove old container
          docker stop app-container || true
          docker rm app-container || true

          # Pull and run new container
          docker pull ${{ env.DOCKER_REPO }}:${{ env.TAG }}
          docker run -d \
            --name app-container \
            -p 80:80 \
            --restart unless-stopped \
            ${{ env.DOCKER_REPO }}:${{ env.TAG }}

          # Health check
          sleep 5
          if ! curl -s http://localhost >/dev/null; then
            echo "::error::Container health check failed"
            docker logs app-container
            exit 1
          fi
          echo "=== Deployment successful ==="
          DEPLOY
