name: Deploy with Docker Hub

on: [push]

env:
  DOCKER_REPO: msorok337/my-website-new  # Замените на ваш репозиторий
  TAG: latest
  REMOTE_DIR: /var/www/my-website

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_PASSWORD }}

      - name: Build and push
        run: |
          docker build -t ${{ env.DOCKER_REPO }}:${{ env.TAG }} .
          docker push ${{ env.DOCKER_REPO }}:${{ env.TAG }}
          echo "IMAGE_NAME=${{ env.DOCKER_REPO }}:${{ env.TAG }}" >> $GITHUB_ENV

      - name: Verify push
        run: |
          echo "Successfully pushed to Docker Hub:"
          echo "Image: ${{ env.DOCKER_REPO }}:${{ env.TAG }}"
  
  deploy:
    needs: build-and-push
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Install SSH tools
        run: sudo apt-get install -y sshpass rsync

      - name: Prepare Server Directory
        env:
          SSH_PASSWORD: ${{ secrets.SSH_PASSWORD }}
        run: |
          sshpass -p "$SSH_PASSWORD" ssh \
            -o StrictHostKeyChecking=no \
            ${{ secrets.SSH_USER }}@${{ secrets.SERVER_IP }} \
            "echo '$SSH_PASSWORD' | sudo -S sh -c 'mkdir -p ${{ env.REMOTE_DIR }} && chmod 755 ${{ env.REMOTE_DIR }}'"

      - name: Upload Site Files
        env:
          SSH_PASSWORD: ${{ secrets.SSH_PASSWORD }}
        run: |
          rsync -avz \
            --progress \
            -e "sshpass -p $SSH_PASSWORD ssh -o StrictHostKeyChecking=no" \
            ./ \
            ${{ secrets.SSH_USER }}@${{ secrets.SERVER_IP }}:${{ env.REMOTE_DIR }}/

      - name: Deploy Container
        env:
          SSH_PASSWORD: ${{ secrets.SSH_PASSWORD }}
        run: |
          sshpass -p "$SSH_PASSWORD" ssh \
            -o StrictHostKeyChecking=no \
            ${{ secrets.SSH_USER }}@${{ secrets.SERVER_IP }} << 'DEPLOY'
          #!/bin/bash
          set -e

          echo "=== Stopping old container ==="
          docker stop app-container || true
          docker rm app-container || true

          echo "=== Starting new container ==="
          docker run -d \
            --name app-container \
            -p 80:80 \
            -v $REMOTE_DIR:/usr/share/nginx/html \
            nginx:alpine

          echo "=== Verification ==="
          sleep 3
          if curl -s http://localhost | grep -q "Welcome to nginx"; then
            echo "::error::Still showing default NGINX page!"
            echo "Files in container:"
            docker exec app-container ls -la /usr/share/nginx/html
            exit 1
          fi
          echo "Deployment successful!"
          DEPLOY
